<%

use [content ingredients url sql ids classids combined combined2 tmp rxlist knowledgeids druglist tmp interactionlist t1 t2 name] [
	t2: now/precise
	if not value? 'load-json [
		do http://www.ross-gill.com/r/altjson.r
	]
	ResObj: make object! [
		error: none
		submitted: []
		invalid: []
		ingredients: []
		atc_ids: []
		class_ids: []
		; combined_ids: []
		unknown: []
		know_id_pairs: []
		interactions:  []
		disclaimer: "Use this information at your own risk and clinical judgement"
		time: none
	]
	IntObj: make object! [
		know_id: none
		warning: none
		risk: none
		management: none
	]
	
	ingredients: copy []
	druglist: copy []
	interactionlist: copy []
	; probe request/content
	either none? content: select request/content 'rxcuilist [
		print "No list submitted"
		ResObj/error: "No List Submitted" 
		response/buffer: to-json ResObj
        response/set-header 'Content-type "application/json"
		quit
	] [
		; trim/head/tail content
		tmp: parse/all dehex content " "
		rxlist: copy []
		if tmp [
			foreach el tmp [
				trim el
				if not empty? el [
					append rxlist el
				]
			]
		]
		?? rxlist
		ResObj/submitted: copy rxlist
		;print {<h2>List of RxCUIs submitted</h2>}
		;print <ol>
		;foreach rxcui rxlist [
		;	print [<li> rxcui]
		;]
		;print </ol>
		; we got the drug list, now get the ingredients
		; first check to see if we have them cached
		tmp: copy rxlist
		foreach el tmp [
			; print [ "<br/>checking " el " for cache " ]
			sql: do-sql 'iam [{select english from ATC where rxcui = (?)} el]
			if sql [
				foreach record sql [
					if not found? find ingredients record/1 [
						append ingredients record/1
						; print [ "found " record/1 <br/> ]
					]
				]
			]
			if not empty? sql [
				remove find rxlist el
			]
		]
		
		;print {<h2>Cached English Names for these RxCUIs</h2>}
		;probe ingredients: unique ingredients
		;print {<h2>RxCUIs that we need to lookup</h2>}
		;probe rxlist
		foreach rxcui rxlist [
			if error? set/any 'err try [
				url: rejoin [http://rxnav.nlm.nih.gov/REST/rxcui/ rxcui "/allrelated"] ; related?rela=tradename_of+has_precise_ingredient" ] 
				jason-info: read/custom url [get "" [Accept: "Application/JSON"]]
				rebol-info: load-json jason-info
				;print <pre>
				;probe rebol-info
				;print </pre>
				either all [ in rebol-info/allrelatedgroup 'conceptgroup block? group: rebol-info/allrelatedgroup/conceptgroup ]  [
					; now get all the ingredients
					foreach obj group [
						if obj/tty = "IN" [
							foreach ingredient obj/conceptProperties [
								name: ingredient/name
								append ingredients uppercase name
								do-sql 'iam [{update ATC set rxcui = (?) where english = (?)} rxcui name]
							]
						]
					]
				] [
					; print "not block relatedgroup/conceptgroup"
					append ResObj/invalid rxcui
				]
			] [
				resobj/error: mold disarm err
				;print <pre>
				;print mold disarm err
				;print </pre>
			]
		]
		either empty? ingredients [
			;print "no ingredients"
		] [
			;print "<h3>Ingredient List</h3>"
			;print <ol>
			foreach ingredient ingredients [
				;print [<li> ingredient]
			]
			print </ol>
		]
		; now that we have a list of ingredients, we can examine the codes
		ids: copy []
		ingredients: unique ingredients
		resObj/ingredients: copy ingredients
		foreach ingredient ingredients [
			tmp: copy []
			; ?? ingredient
			sql: do-sql 'iam [{select id from ATC where english = (?)} ingredient]
			; print ingredient probe sql 
			if sql [
				foreach id sql [
					append ids id
					append tmp id
				]
			]
			append druglist ingredient
			append/only druglist tmp
		]
		; now print the ATC ids
		; print {<h3>ATC IDs</h3>}
		; probe ids
		resobj/atc_ids: copy ids
		; probe druglist
		; now get the ClassIDs
		classids: copy []
		foreach id ids [
			sql: do-sql 'iam [{select id_class from IAM_TREE where ID_ATC = (?)} id]
			if sql [
				foreach classid sql [
					append classids classid
					foreach [drug listofids] druglist [
						if find listofids id [
							append listofids classid
							break
						]
					]
				]
			]
		]
		;print {<h3>Class IDs</h3>}
		;probe classids
		resobj/class_ids: copy classids
		; now join them
		combined: sort unique union classids ids
		;print {<h3>Combined IDs</h3>}
		; probe combined
		;probe druglist
		;print <br/>
		;print {<h3>Drugs not found ..</h3>}
		foreach [name list] druglist [
			if empty? list [
				;print [name <br/>]
				append resobj/unknown name
				write/append %missingdrugs.txt join name newline
			]
		]
		;print {<h3>Interaction Pairs</h3>}
		; now do a search on each pair
		knowledgeids: copy []
		combined2: copy combined
		foreach atc1 combined [
			foreach atc2 combined2 [
				if atc1 <> atc2 [
					; now check that both are not in same set
					candidates: sort reduce [atc1 atc2]
					sameset: false
					foreach [drug listofatcs] druglist [
						if candidates = intersect listofatcs candidates [
							; in the same set
							sameset: true
							break
						]
					]
					if not sameset [
						sql: do-sql 'iam [{select interaction_knowledge_id from interactions where (atc_id1 = (?) and atc_id2 = (?)) or (atc_id1 = (?) and atc_id2 = (?))} atc1 atc2 atc2 atc1]
						if all [ sql not empty? sql ][
							;print ["<br/>interaction found on ATC pair " atc1 atc2 "Knowledge IDs	: "]
							foreach id sql [
								;print [ " " id " " ]
								append knowledgeids id
								append interactionlist id
								tmp: copy []

								foreach [name list] druglist [
									if find list atc1 [
										append tmp name
										;break
									]
								]
								foreach [name list] druglist [
									if find list atc2 [
										append tmp name
										;break
									]
								]
								sort tmp
								append/only interactionlist tmp
							]
						]
					]
				]
			]
			; don't need to traverse the first each time
			remove head combined2
		]
		;print {<h3>Knowledge IDs and Drug Pairs</h3>}
		;probe interactionlist
		resobj/know_id_pairs: copy/deep interactionlist
		;print {<h3>Knowledge IDs</h3>}
		either empty? knowledgeids [
			;print "no interactions found."
		] [
			knowledgeids: unique knowledgeids
			;probe knowledgeids

			; display any drugs not found
			

			; now provide the knowledge
			foreach id knowledgeids [
				sql: do-sql 'iam [{select type, risk_en, management_en from interaction_knowledge where id = (?)} id]
				if sql [
					foreach record sql [
						append resObj/interactions  make IntObj compose/deep [ 
							know_id: (id)
							drugs:  [(select interactionlist id)]
							warning: (record/1)
							risk: (record/2)
							management: (record/3)
						]
					]
				]
			]
		]
	]
	t1: now/precise
	; print ["Time: " difference t1 t2]
	resobj/time: form difference t1 t2
	response/buffer: to-json ResObj
    response/set-header 'Content-type "application/json"
]
%>